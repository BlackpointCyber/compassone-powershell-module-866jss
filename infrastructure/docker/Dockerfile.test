# Base PowerShell image with version and platform support
# Version: latest
FROM mcr.microsoft.com/powershell:${POWERSHELL_VERSION}

# Set working directory for test execution
WORKDIR /tests

# Disable PowerShell telemetry
ENV POWERSHELL_TELEMETRY_OPTOUT=1

# Install required PowerShell modules and dependencies
SHELL ["pwsh", "-Command"]
RUN Install-Module -Name Pester -RequiredVersion 5.3.0 -Force -SkipPublisherCheck

# Create directories for test results and coverage
RUN mkdir -p /tests/test-results /tests/coverage

# Copy test files and configurations
COPY . .

# Set appropriate permissions for test directories
RUN if [ "$(uname)" = "Linux" ]; then \
        chmod -R 755 /tests; \
    fi

# Configure memory and CPU limits
# Memory: 2GB, CPU: 2 cores
ENV DOTNET_GC_SERVER=1
ENV DOTNET_RUNNING_IN_CONTAINER=true
ENV DOTNET_MAX_HEAP_COUNT=2

# Set default shell for test execution
SHELL ["pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command"]

# Configure container entrypoint for test execution
ENTRYPOINT ["pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command"]

# Default command to run tests with Pester configuration
CMD ["& {", \
    "$config = & ./src/test/TestConfig/pester.config.ps1;", \
    "$results = Invoke-Pester -Configuration $config -Output Detailed;", \
    "if ($results.FailedCount -gt 0) { exit 1 } else { exit 0 }", \
    "}"]

# Health check to verify PowerShell is working
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["pwsh", "-Command", "$?"]

# Labels for container metadata
LABEL maintainer="Blackpoint Cyber" \
      description="PSCompassOne Test Environment" \
      powershell.version=${POWERSHELL_VERSION} \
      target.os=${TARGET_OS}